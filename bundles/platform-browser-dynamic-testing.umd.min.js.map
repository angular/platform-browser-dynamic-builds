{"version":3,"file":"platform-browser-dynamic-testing.umd.min.js","sources":["../../../../packages/platform-browser-dynamic/testing/src/metadata_overrider.ts","../../../../packages/platform-browser-dynamic/testing/src/compiler_factory.ts","../../../../packages/platform-browser-dynamic/testing/src/platform_core_dynamic_testing.ts","../../../../packages/platform-browser-dynamic/testing/src/testing.ts","../../../../packages/platform-browser-dynamic/testing/index.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride} from '@angular/core/testing';\n\ntype StringMap = {\n  [key: string]: any\n};\n\nlet _nextReferenceId = 0;\n\nexport class MetadataOverrider {\n  private _references = new Map<any, string>();\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata<C extends T, T>(\n      metadataClass: {new (options: T): C;}, oldMetadata: C, override: MetadataOverride<T>): C {\n    const props: StringMap = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach((prop) => props[prop] = (<any>oldMetadata)[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(<any>props);\n  }\n}\n\nfunction removeMetadata(metadata: StringMap, remove: any, references: Map<any, string>) {\n  const removeObjects = new Set<string>();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (removeValue instanceof Array) {\n      removeValue.forEach(\n          (value: any) => { removeObjects.add(_propHashKey(prop, value, references)); });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (propValue instanceof Array) {\n      metadata[prop] = propValue.filter(\n          (value: any) => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata: StringMap, add: any) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && propValue instanceof Array) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata: StringMap, set: any) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName: any, propValue: any, references: Map<any, string>): string {\n  const replacer = (key: any, value: any) => {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref: any, references: Map<any, string>): string {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${stringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\n\n\nfunction _valueProps(obj: any): string[] {\n  const props: string[] = [];\n  // regular public props\n  Object.keys(obj).forEach((prop) => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach((protoProp) => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, DirectiveResolver, ERROR_COMPONENT_TYPE, NgModuleResolver, PipeResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver} from '@angular/compiler/testing';\nimport {Compiler, CompilerFactory, CompilerOptions, Component, ComponentFactory, Directive, Injectable, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, Pipe, PlatformRef, StaticProvider, Type, createPlatformFactory, ɵstringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompiler as TestingCompiler, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵCompilerImpl as CompilerImpl, ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\nimport {MetadataOverrider} from './metadata_overrider';\n\nexport const COMPILER_PROVIDERS: StaticProvider[] = [\n  {provide: MockPipeResolver, deps: [CompileReflector]},\n  {provide: PipeResolver, useExisting: MockPipeResolver},\n  {provide: MockDirectiveResolver, deps: [CompileReflector]},\n  {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n  {provide: MockNgModuleResolver, deps: [CompileReflector]},\n  {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n];\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _injector: Injector, private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <CompilerImpl>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: CompilerImpl, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver) {}\n  get injector(): Injector { return this._compiler.injector; }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getNgContentSelectors(component: Type<any>): string[] {\n    return this._compiler.getNgContentSelectors(component);\n  }\n\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n    this.clearCacheFor(ngModule);\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata !, override));\n    this.clearCacheFor(directive);\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata !, override));\n    this.clearCacheFor(component);\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n    this.clearCacheFor(pipe);\n  }\n  loadAotSummaries(summaries: () => any[]) { this._compiler.loadAotSummaries(summaries); }\n  clearCache(): void { this._compiler.clearCache(); }\n  clearCacheFor(type: Type<any>) { this._compiler.clearCacheFor(type); }\n\n  getComponentFromError(error: Error) { return (error as any)[ERROR_COMPONENT_TYPE] || null; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMPILER_OPTIONS, CompilerFactory, Injector, PlatformRef, StaticProvider, createPlatformFactory} from '@angular/core';\nimport {TestComponentRenderer, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\nimport {COMPILER_PROVIDERS, TestingCompilerFactoryImpl} from './compiler_factory';\n\n/**\n * Platform for dynamic tests\n *\n * @experimental\n */\nexport const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(platformCoreDynamic, 'coreDynamicTesting', [\n      {provide: COMPILER_OPTIONS, useValue: {providers: COMPILER_PROVIDERS}, multi: true}, {\n        provide: TestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n      }\n    ]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, PlatformRef, StaticProvider, createPlatformFactory} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from '@angular/platform-browser-dynamic';\nimport {BrowserTestingModule} from '@angular/platform-browser/testing';\n\nimport {DOMTestComponentRenderer} from './dom_test_component_renderer';\nimport {platformCoreDynamicTesting} from './platform_core_dynamic_testing';\n\nexport * from './private_export_testing'\n\n/**\n * @stable\n */\nexport const platformBrowserDynamicTesting = createPlatformFactory(\n    platformCoreDynamicTesting, 'browserDynamicTesting',\n    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * NgModule for testing.\n *\n * @stable\n */\n\nexport class BrowserDynamicTestingModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  exports: [BrowserTestingModule],\n  providers: [\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser-dynamic/testing package.\n */\n\nexport * from './src/testing';\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/platform-browser';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor( private _doc: any /** TODO #9100 */) { super(); }\n\n  insertRootElement(rootElId: string) {\n    const rootEl = <HTMLElement>getDOM().firstChild(\n        getDOM().content(getDOM().createTemplate(`<div id=\"${rootElId}\"></div>`)));\n\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = getDOM().querySelectorAll(this._doc, '[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n    getDOM().appendChild(this._doc.body, rootEl);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n"],"names":["MetadataOverrider","prototype","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","forEach","prop","set","remove","add","Error","_angular_core","ɵstringify","setMetadata","removeMetadata","this","_references","addMetadata","COMPILER_PROVIDERS","provide","NgModuleResolver","MockPipeResolver","deps","_angular_compiler","CompileReflector","PipeResolver","useExisting","_angular_compiler_testing","MockDirectiveResolver","DirectiveResolver","MockNgModuleResolver","TestingCompilerFactoryImpl","_injector","_compilerFactory","createTestingCompiler","options","compiler","createCompiler","TestingCompilerImpl","injector","get","_compiler","_directiveResolver","_pipeResolver","_moduleResolver","Object","defineProperty","enumerable","configurable","compileModuleSync","moduleType","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getNgContentSelectors","component","getComponentFactory","checkOverrideAllowed","type","hasAotSummary","overrideModule","ngModule","resolve","setNgModule","_overrider","NgModule","clearCacheFor","overrideDirective","directive","setDirective","Directive","overrideComponent","Component","overridePipe","pipe","loadAotSummaries","summaries","BrowserDynamicTestingModule","args","exports","module","factory","require","metadata","references","removeObjects","Set","_loop_1","removeValue","Array","value","_propHashKey","_loop_2","propValue","filter","has","undefined","addValue","concat","propName","replacer","key","_serializeReference","JSON","stringify","id","ref","_nextReferenceId","obj","startsWith","push","proto","keys","protoProp","extendStatics","setPrototypeOf","__proto__","d","b","p","hasOwnProperty","getDOM","_this","_super","call","__extends","DOMTestComponentRenderer","ɵgetDOM","rootEl","_angular_platformBrowser","firstChild","content","createTemplate","rootElId","i","oldRoots","length","appendChild","_doc","body"],"mappings":"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"}