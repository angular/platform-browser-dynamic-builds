{"version":3,"file":"testing.js","sources":["../../../../../packages/platform-browser-dynamic/testing/index.ts","../../../../../packages/platform-browser-dynamic/testing/src/testing.ts","../../../../../packages/platform-browser-dynamic/testing/src/private_export_testing.ts","../../../../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser-dynamic/testing package.\n */\n\nexport * from './src/testing';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {platformCoreDynamicTesting} from '@angular/compiler/testing';\nimport {NgModule, PlatformRef, StaticProvider, createPlatformFactory} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from '@angular/platform-browser-dynamic';\nimport {BrowserTestingModule} from '@angular/platform-browser/testing';\n\nimport {DOMTestComponentRenderer} from './dom_test_component_renderer';\n\nexport * from './private_export_testing'\n\n/**\n * @stable\n */\nexport const platformBrowserDynamicTesting = createPlatformFactory(\n    platformCoreDynamicTesting, 'browserDynamicTesting',\n    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * NgModule for testing.\n *\n * @stable\n */\n\nexport class BrowserDynamicTestingModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  exports: [BrowserTestingModule],\n  providers: [\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {DOMTestComponentRenderer as ɵDOMTestComponentRenderer} from './dom_test_component_renderer';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/platform-browser';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor( private _doc: any /** TODO #9100 */) { super(); }\n\n  insertRootElement(rootElId: string) {\n    const rootEl = <HTMLElement>getDOM().firstChild(\n        getDOM().content(getDOM().createTemplate(`<div id=\"${rootElId}\"></div>`)));\n\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = getDOM().querySelectorAll(this._doc, '[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n    getDOM().appendChild(this._doc.body, rootEl);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n"],"names":["INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS","getDOM"],"mappings":";;;;;;;AGAA;;;;;;;AAQA,AACA,AACA,AAEA;;;AAIA,AAAA,MAAA,wBAAsC,SAAQ,qBAAA,CAA9C;IACE,WAAF,CAAwC,IAAM,oBAA9C;QAAuE,KAAA,EAAM,CAAE;QAAvC,IAAxC,CAAA,IAAwC,GAAA,IAAA,CAAM;KAAkC;IAE9E,iBAAiB,CAAC,QAAU,EAA9B;QACI,MAAM,MAAA,GAAsBC,OAAC,EAAM,CAAE,UAAC,CAClCA,OAAM,EAAC,CAAE,OAAC,CAAOA,OAAC,EAAM,CAAE,cAAC,CAAc,CADjD,SAAA,EACkD,QAAY,CAD9D,QAAA,CACsE,CAAU,CAAC,CAAC,CAAC;;QAG/E,MAAM,QAAA,GAAWA,OAAA,EAAO,CAAE,gBAAC,CAAgB,IAAC,CAAI,IAAC,EAAK,YAAA,CAAa,CAAC;QACpE,KAAK,IAAI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,CAAS,MAAC,EAAO,CAAA,EAAE,EAAG;YACxCA,OAAM,EAAC,CAAE,MAAC,CAAM,QAAC,CAAQ,CAAC,CAAC,CAAC,CAAC;SAC9B;QACDA,OAAM,EAAC,CAAE,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,IAAC,EAAK,MAAA,CAAO,CAAC;KAC9C;;AACI,wBAAP,CAAA,UAAiB,GAAqC;IACtD,EAAE,IAAI,EAAE,UAhBN,EAAA;CAiBD,CAAC;;AAEK,wBAAP,CAAA,cAAqB,GAA8E,MAAM;IACzG,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAlBvB,EAAA,IAAA,EAAA,CAAA,QAAO,EAAA,EAAA,EAAA,EAAA;CAmBtB,CAAC;;ADpCF;;;;;;GAMG,AAEH,AAAoG;;ADRpG;;;;;;;AAQA,AACA,AACA,AACA,AACA,AAEA,AAEA,AAEA;;;AAGA,AAAO,MAAM,6BAAA,GAAgC,qBAAA,CACzC,0BAA0B,EAAE,uBAAA,EAC5BD,4CAA2C,CAAC,CAAC;;;;;;AAQjD,AAAA,MAAA,2BAAA,CAAA;;AACO,2BAAP,CAAA,UAAiB,GAAqC;IACtD,EAAE,IAAI,EAAE,QAHN,EAAA,IAAA,EAAA,CAAA;gBAIA,OAAO,EAHE,CAAA,oBAAE,CAAoB;gBAI/B,SAAS,EAHE;oBAIT,EAAC,OAHC,EAAQ,qBAAA,EAAuB,QAAA,EAAU,wBAAA,EAAyB;iBAIrE;aACF,EAAG,EAAE;CACL,CAAC;;AAEK,2BAAP,CAAA,cAAqB,GAA8E,MAAM,EACxG,CAAC;;AD1CF;;;;;;;;;;;GAYG,AAEH,AAA8B;;"}