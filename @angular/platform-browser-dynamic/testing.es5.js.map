{"version":3,"file":"testing.es5.js","sources":["../../../../../packages/platform-browser-dynamic/testing/index.ts","../../../../../packages/platform-browser-dynamic/testing/src/testing.ts","../../../../../packages/platform-browser-dynamic/testing/src/private_export_testing.ts","../../../../../packages/platform-browser-dynamic/testing/src/platform_core_dynamic_testing.ts","../../../../../packages/platform-browser-dynamic/testing/src/compiler_factory.ts","../../../../../packages/platform-browser-dynamic/testing/src/metadata_overrider.ts","../../../../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser-dynamic/testing package.\n */\n\nexport * from './src/testing';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, PlatformRef, StaticProvider, createPlatformFactory} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from '@angular/platform-browser-dynamic';\nimport {BrowserTestingModule} from '@angular/platform-browser/testing';\n\nimport {DOMTestComponentRenderer} from './dom_test_component_renderer';\nimport {platformCoreDynamicTesting} from './platform_core_dynamic_testing';\n\nexport * from './private_export_testing'\n\n/**\n * @stable\n */\nexport const platformBrowserDynamicTesting = createPlatformFactory(\n    platformCoreDynamicTesting, 'browserDynamicTesting',\n    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * NgModule for testing.\n *\n * @stable\n */\n\nexport class BrowserDynamicTestingModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  exports: [BrowserTestingModule],\n  providers: [\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {DOMTestComponentRenderer as ɵDOMTestComponentRenderer} from './dom_test_component_renderer';\nexport {platformCoreDynamicTesting as ɵplatformCoreDynamicTesting} from './platform_core_dynamic_testing';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMPILER_OPTIONS, CompilerFactory, Injector, PlatformRef, StaticProvider, createPlatformFactory} from '@angular/core';\nimport {TestComponentRenderer, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\nimport {COMPILER_PROVIDERS, TestingCompilerFactoryImpl} from './compiler_factory';\n\n/**\n * Platform for dynamic tests\n *\n * @experimental\n */\nexport const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(platformCoreDynamic, 'coreDynamicTesting', [\n      {provide: COMPILER_OPTIONS, useValue: {providers: COMPILER_PROVIDERS}, multi: true}, {\n        provide: TestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n      }\n    ]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, DirectiveResolver, ERROR_COMPONENT_TYPE, NgModuleResolver, PipeResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver} from '@angular/compiler/testing';\nimport {Compiler, CompilerFactory, CompilerOptions, Component, ComponentFactory, Directive, Injectable, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, Pipe, PlatformRef, StaticProvider, Type, createPlatformFactory, ɵstringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompiler as TestingCompiler, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵCompilerImpl as CompilerImpl, ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\nimport {MetadataOverrider} from './metadata_overrider';\n\nexport const COMPILER_PROVIDERS: StaticProvider[] = [\n  {provide: MockPipeResolver, deps: [CompileReflector]},\n  {provide: PipeResolver, useExisting: MockPipeResolver},\n  {provide: MockDirectiveResolver, deps: [CompileReflector]},\n  {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n  {provide: MockNgModuleResolver, deps: [CompileReflector]},\n  {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n];\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _injector: Injector, private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <CompilerImpl>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: CompilerImpl, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver) {}\n  get injector(): Injector { return this._compiler.injector; }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getNgContentSelectors(component: Type<any>): string[] {\n    return this._compiler.getNgContentSelectors(component);\n  }\n\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n    this.clearCacheFor(ngModule);\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata !, override));\n    this.clearCacheFor(directive);\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata !, override));\n    this.clearCacheFor(component);\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n    this.clearCacheFor(pipe);\n  }\n  loadAotSummaries(summaries: () => any[]) { this._compiler.loadAotSummaries(summaries); }\n  clearCache(): void { this._compiler.clearCache(); }\n  clearCacheFor(type: Type<any>) { this._compiler.clearCacheFor(type); }\n\n  getComponentFromError(error: Error) { return (error as any)[ERROR_COMPONENT_TYPE] || null; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride} from '@angular/core/testing';\n\ntype StringMap = {\n  [key: string]: any\n};\n\nlet _nextReferenceId = 0;\n\nexport class MetadataOverrider {\n  private _references = new Map<any, string>();\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata<C extends T, T>(\n      metadataClass: {new (options: T): C;}, oldMetadata: C, override: MetadataOverride<T>): C {\n    const props: StringMap = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach((prop) => props[prop] = (<any>oldMetadata)[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(<any>props);\n  }\n}\n\nfunction removeMetadata(metadata: StringMap, remove: any, references: Map<any, string>) {\n  const removeObjects = new Set<string>();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (removeValue instanceof Array) {\n      removeValue.forEach(\n          (value: any) => { removeObjects.add(_propHashKey(prop, value, references)); });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (propValue instanceof Array) {\n      metadata[prop] = propValue.filter(\n          (value: any) => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata: StringMap, add: any) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && propValue instanceof Array) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata: StringMap, set: any) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName: any, propValue: any, references: Map<any, string>): string {\n  const replacer = (key: any, value: any) => {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref: any, references: Map<any, string>): string {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${stringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\n\n\nfunction _valueProps(obj: any): string[] {\n  const props: string[] = [];\n  // regular public props\n  Object.keys(obj).forEach((prop) => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach((protoProp) => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/platform-browser';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor( private _doc: any /** TODO #9100 */) { super(); }\n\n  insertRootElement(rootElId: string) {\n    const rootEl = <HTMLElement>getDOM().firstChild(\n        getDOM().content(getDOM().createTemplate(`<div id=\"${rootElId}\"></div>`)));\n\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = getDOM().querySelectorAll(this._doc, '[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n    getDOM().appendChild(this._doc.body, rootEl);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n"],"names":["getDOM"],"mappings":";;;;;;;;;AMAA,OAAA,EAAA,oBAAA,EAAA,MAAA,mCAAA,CAAA;;;;;;;;;;GAiBA;AAAA;;GAAA;AAEA;IAAA,oDAAA;IACA,kCAAA,IAAU,CAAV,iBAAA;QAAA,sCAKA;QADI,KAAJ,CAAA,IAAA,GAAA,IAAA,CAAqBA,CAArB,iBAAA;;IACA,CAAA;IACAA,oDAAa,GAAbA,UAAe,QAAfA;QACA,IAAA,MAAA,GAAA,OAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,CAAA,OAAA,CAAA,OAAA,EAAA,CAAA,cAAA,CAAA,eAAA,QAAA,cAAA,CAAA,CAAA,CAAA,CAAA;QACIA,8CAA6C;QACjD,IAAA,QAAA,GAAA,OAAA,EAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;;YACA,OAAA,EAAA,CAAA,MAAA,CAAA,QAAA,CAAsD,CAAtD,CAAA,CAAA,CAAA;QACA,CAAA;QACA,OAAA,EAAA,CAAA,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;IAEO,+BAAP;AAAO,CAAP,AAfA,CAAA,qBAAA,GAeA;AACA,wBAAA,CAAA,UAA8B,GAAG;IACjC,EAAA,IAAA,EAAA,UAAA,EAAA;;ADpCA,kBAAA;;;;;;;;;;GA4CA;;;;;IArBE,CAAF;IAEA;;;OAGA;IAEA,4CAAgB,GAAhB,UAAiB,aAAjB,EAAA,WAAA,EAAA,QAAA;QACA,IAAA,KAAA,GAAA,EAAkB,CAAC;QACnB,EAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAkB;YAClB,WAAA,CAAA,WAAA,CAAA,CAAA,OAAA,CAAA,UAAA,IAAA,IAAA,OAAA,KAAA,CAAA,IAAA,CAAA,GAAA,WAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,CAAA;QACA,CAAA;QACA,EAAA,CAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA;YACQ,EAAR,CAAA,CAAA,QAAA,CAAA,MAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA;gBACA,MAAA,IAAoB,KAApB,CAA0B,+BAA1B,UAAA,CAAA,aAAA,CAAA,uBAAA,CAAA,CAAA;YACA,CAAA;YACQ,WAAR,CAAoB,KAApB,EAAA,QAAA,CAAA,GAAA,CAAA,CAAA;QACA,CAAA;QACA,EAAA,CAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA;YACA,cAAA,CAAA,KAA4B,EAA5B,QAAA,CAAA,MAAA,EAAA,IAAA,CAAA,WAAA,CAAA,CAAA;QACA,CAAA;QACA,EAAA,CAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA;YAEA,WAAA,CAAwB,KAAxB,EAAA,QAAA,CAAwD,GAAxD,CAAA,CAAA;QACA,CAAA;QACA,MAAA,CAAa,IAAI,aAAjB,CAAA,KAAA,CAAA,CAAA;IACA,CAAA;IACA,wBAAA;AAAA,CAAA,IAAA;AACA,wBAAkB,QACR,EADV,MAAA,EAAA,UAAA;IAEA,IAAA,aAAA,GAAA,IAAA,GAAA,EAAA,CAAA;4BAAA,IAAA;QACA,IAAA,WAAmB,GAAnB,MAAA,CAAA,IAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,WAAA,YAAA,KAAA,CAAA,CAAA,CAAA;YACA,WAAA,CAAA,OAAA,CAAA,UAAA,KAAA,IAAA,aAAA,CAAA,GAAA,CAAA,YAAA,CAAA,IAAA,EAAA,KAAA,EAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;QAEA,CAAO;QACH,IAAJ,CAAA,CAAU;YACF,aAAR,CAAA,GAAA,CAAA,YAAA,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,CAAA,CAAA,CAAA;QACA,CAAA;IAEA,CAAA;IAVA,GAAA,CAAA,CAAA,IAAA,IAAA,IAAA,MAAA,CAAA;gBAAA,IAAA;KAUA;4BAAA,IAAA;QACA,IAAA,SAAA,GAAA,QAA4B,CAA5B,IAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,SAAA,YAAyB,KAAzB,CAAA,CAAA,CAAA;YACA,QAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,MAAA,CAAA,UAAA,KAAA,IAAA,OAAA,CAAA,aAAA,CAAA,GAAA,CAAA,YAAA,CAAA,IAAA,EAAA,KAAA,EAAA,UAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;QACA,CAAK;QACL,IAAA,CAAA,CAAA;YACA,EAAA,CAAA,CAAA,aAAA,CAAA,GAAA,CAAA,YAAA,CAAA,IAAA,EAAA,SAAA,EAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA;gBAEA,QAAA,CAAA,IAAwC,CAAxC,GAAA,SAAA,CAAA;YACA,CAAA;QACI,CAAJ;IACA,CAAA;IAXA,GAAA,CAAA,CAAA,IAAA,IAAA,IAAA,QAAA,CAAA;gBAAA,IAAA;KAWA;AACA,CAAA;AACA,qBAAe,QAAQ,EAAvB,GAAA;IACA,GAAA,CAAA,CAAK,IAAL,IAAA,IAAA,GAAA,CAAA,CAAA,CAAA;QAAA,IAAA,QAAA,GAAA,GAAA,CAAA,IAAA,CAAA,CAAA;QACA,IAAA,SAAA,GAAoB,QAApB,CAAA,IAAA,CAAA,CAAA;QACA,EAAA,CAAA,CAAA,SAAA,IAAA,IAAA,IAAA,SAAA,YAAA,KAAA,CAAA,CAAA,CAAA;YACA,QAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA;QACA,CAAA;QAEA,IAAA,CAAA,CAAA;YACA,QAAA,CAAA,IAAA,CAAwB,GAAxB,QAAA,CAAA;QACI,CAAJ;IACA,CAAG;AACH,CAAC;AAED,qBAAA,QAAA,EAAA,GAAA;IACE,GAAF,CAAA,CAAA,IAAA,IAAA,IAAA,GAAA,CAA8B,CAA9B,CAAA;QACI,QAAJ,CAAA,IAAA,CAAA,GAAA,GAAA,CAAyB,IAAzB,CAAA,CAAA;IACA,CAAA;AACA,CAAA;AACA,sBAAA,QAAA,EAAA,SAAA,EAAA,UAAA;IACA,IAAA,QAAA,GAAA,UAAA,GAAA,EAAA,KAAA;QAEA,EAAA,CAAS,CAAT,OAAA,KAAA,KAAA,UAAA,CAAsC,CAAC,CAAvC;YACA,KAAA,GAAA,mBAAA,CAAA,KAAA,EAAA,UAAA,CAAA,CAAA;QAEA,CAAA;QACM,MAAN,CAAA,KAAA,CAAA;IACE,CAAF,CAAA;IACA,MAAM,CAAN,QAAA,SAAqB,IAAI,CAAC,SAA1B,CAAA,SAA6C,EAAE,QAA/C,CAAA,CAAA;AACA,CAAA;AACA,6BAAA,GAAA,EAAA,UAAA;IACE,IAAF,EAAA,GAAW,UAAX,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;IACA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;QAGA,EAAA,GAAA,KAAA,UAAA,CAAA,GAAA,CAAA,GAAA,gBAAA,EAAA,CAAA;QACA,UAA0B,CAA1B,GAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA;;IAEE,MAAM,CAAC,EAAT,CAAA;AACA,CAAA;AACA,qBAAA,GAAA;IACA,IAAA,KAAA,GAAA,EAAA,CAAA;IACA,uBAAA;;QAGM,EAAN,CAAA,CAAA,CAAW,IAAX,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;YACA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACI,CAAJ;IACA,CAAA,CAAA,CAAA;IACA,UAAA;IACA,IAAA,KAAA,GAAQ,GAAR,CAAA;IACA,OAAA,KAAA,GAAA,MAAA,CAAA,cAAA,CAAA,KAAA,CAAA,EAAA,CAAA;QACA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,OAAA,CAAA,UAAA,SAAA;YACA,IAAA,IAAA,GAAA,MAAA,CAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA,CAAA;YACA,EAAA,CAAA,CAAc,CAAC,SAAf,CAAA,UAAA,CAAA,GAAA,CAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,CAAA,CAAA,CAAA;gBACA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;;QDlIA,CAAA,CAAA,CAAA;;;;;;;;;;GAoBA;AACA,IAAG,kBAAH,GAAA;IACE,EAAC,OAAO,EAAE,gBAAgB,EAAE,IAA9B,EAAA,CAAA,gBAAA,CAAA,EAAA;IACA,EAAA,OAAA,EAAA,YAAA,EAAA,WAAA,EAAA,gBAAA,EAAA;IAEA,EAAA,OAAA,EAAA,qBAAA,EAAA,IAAA,EAAA,CAAA,gBAAA,CAAA,EAAA;IACE,EAAF,OAAA,EAAA,iBAAA,EAAA,WAAA,EAAA,qBAAA,EAAA;IAAA,EAAA,OAAA,EAAA,oBAAyC,EAAzC,IAAA,EAAA,CAAA,gBAAA,CAAA,EAAA;IAAA,EAAA,OAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,oBAAA,EAAA;CAAA,CAAA;AAEA;IACA,oCAAA,SAAmC,EAAnC,gBAAA;QACI,IAAJ,CAAA,SAAA,GAAA,SAAA,CAAA;QAGA,IAAA,CAAA,gBAAA,GAAA,gBAAA,CAAA;IACA,CAAA;IAEA,0DAAA,GAAA,UAAA,OAAA;QAEA,IAAA,QAAA,GACqC,IADrC,CAAA,gBAAA,CAEc,cAFd,CAEuD,OAFvD,CAAA,CAAA;QACc,MAAd,CAAA,IAAA,mBAAA,CAAA,QAAA,EAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,qBAAA,CAAA,EAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,EAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,oBAAA,CAAA,CAAA,CAAA;IAAA,CAAA;IACA,iCAAA;AAAA,CAAA,AAZA,IAYA;AAAA;IAHA,6BAAA,SAAA,EAAA,kBAAA,EAA4C,aAA5C,EAAA,eAAA;QAGA,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;QACM,IAAN,CAAA,kBAAA,GAAA,kBAA4D,CAA5D;QAEA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;QACI,IAAJ,CAAA,eAAA,GAAA,eAAA,CAA2C;QAC3C,IAAA,CAAA,UAAA,GAAA,IAAA,iBAAA,EAAA,CAAA;IAEE,CAAF;IACA,sBAAI,yCAAJ;aAAA,cAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,CAAA;;;OAAA;IACA,+CAAA,GAAA,UAAA,UAAA;QACA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,iBAAA,CAA0D,UAA1D,CAAA,CAAA;IACA,CAAA;IACA,gDAAA,GAAA,UAAA,UAAA;QAEA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,kBAAA,CAA2D,UAA3D,CAAA,CAAA;IAEA,CAAA;IACA,+DAAA,GAAA,UAAA,UAAA;QAEA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,iCAAA,CAAA,UAAA,CAAA,CAAA;IACA,CAAA;IACA,gEAAA,GAAA,UAAA,UAAA;QAEA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,kCAAA,CAAA,UAAA,CAAA,CAAA;IACA,CAAA;IACA,mDAAA,GAAA,UAAA,SAAA;QAEA,MAAA,CAAA,IAAA,CAAA,SAAsC,CAAtC,qBAAA,CAAA,SAAA,CAAA,CAAA;IACA,CAAA;IACA,iDAAA,GAAA,UAAA,SAAA;QACA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,CAAA;IACA,CAAG;IAED,kDAAF,GAAE,UAAF,IAAsC;QAClC,EAAJ,CAAA,CAAQ,IAAR,CAAA,SAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;YACA,MAAA,IAAA,KAAA,CAAA,UAAA,CAAA,IAAA,CAAA,0DAAA,CAAA,CAAA;QACI,CAAJ;IAEA,CAAA;IACA,4CAAA,GAAA,UAAA,QAAA,EAAA,QAAA;QACA,IAAA,CAAA,oBAA0C,CAA1C,QAAA,CAAA,CAAA;QACI,IAAJ,WAAA,GAAA,IAAA,CAA6B,eAA7B,CAAA,OAAA,CAAA,QAAA,EAAA,KAAA,CAAA,CAAA;QACI,IAAJ,CAAA,eAAwB,CAAxB,WAAA,CAAA,QAAA,EAA+C,IAA/C,CAAA,UAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,WAAA,EAAA,QAAA,CAAA,CAAA,CAAA;QACI,IAAI,CAAC,aAAT,CAAA,QAAA,CAAA,CAAA;IAEA,CAAA;IACA,+CAAA,GAAA,UAAA,SAAA,EAAA,QAAA;QACA,IAAA,CAAA,oBAA0C,CAA1C,SAAA,CAAA,CAAA;QACI,IAAJ,WAAA,GAAA,IAAA,CAA6B,kBAA7B,CAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,CAAA;QACI,IAAJ,CAAA,kBAAA,CAA4B,YAA5B,CAAA,SAAA,EAAA,IAAwD,CAAxD,UAAmE,CAAnE,gBAAA,CAAA,SAAA,EAAA,WAAA,EAAA,QAAA,CAAA,CAAA,CAAA;QACI,IAAI,CAAC,aAAT,CAAA,SAAA,CAAA,CAAA;IAEA,CAAA;IACA,+CAAA,GAAA,UAAA,SAAA,EAAA,QAAA;QACA,IAAA,CAAA,oBAAA,CAAA,SAAA,CAAA,CAAA;QACI,IAAJ,WAAA,GAAA,IAAA,CAA6B,kBAA7B,CAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,CAAA;QACI,IAAJ,CAAA,kBAAA,CAA4B,YAA5B,CAAA,SAAkD,EAAlD,IAAA,CAAyD,UAAzD,CAAA,gBAAA,CAAA,SAAA,EAAA,WAAA,EAAA,QAAA,CAAA,CAAA,CAAA;QACI,IAAI,CAAC,aAAa,CAAC,SAAvB,CAAA,CAAA;IACA,CAAA;IACA,0CAAA,GAAA,UAAA,IAAA,EAAA,QAAA;QACA,IAAA,CAAA,oBAAA,CAA6C,IAAI,CAAC,CAAlD;QACA,IAAY,WAAZ,GAAA,IAAA,CAAqC,aAAa,CAAC,OAAnD,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;QACA,IAAA,CAAA,aAAmC,CAAnC,OAAA,CAAA,IAAA,EAAkD,IAAlD,CAAA,UAAA,CAAA,gBAAA,CAAA,IAAA,EAAA,WAAA,EAAA,QAAA,CAAA,CAAA,CAAA;QAEA,IAAA,CAAA,aAAwB,CAAxB,IAAoC,CAApC,CAAA;IACA,CAAA;;IDzGA,wCAAA,GAAA,cAAA,IAAA,CAAA,SAAA,CAAA,UAAA,EAAA,CAAA,CAAA,CAAA;;;;CCwCA;;;;;;;;ADrBA;;;;GAKA;AACA,IAAA,0BAAA,GAAA,qBAAA,CAAA,oBAAA,EAAA,oBAAA,EAAA;IACA,EAAA,OAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA;;QD1BA,QAAA,EAAA,0BAAA;;;;;;;;;;;;;;;;;;;;;;AD+BA;;;;GAGA;AACA;IAAA;IACA,CAAA;IAAA,kCAAA;AAAA,CAAA,AADA,IACA;AACA,2BAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA;gBACA,OAAA,EAAA,CAAA,oBAAA,CAAA;;oBAEA,EAAA,OAAA,EAAA,qBAAA,EACE,QADF,EAAA,wBAAA,EAAA;;aDzCA,EAAA,EAAA;;;;;;;;;;GAYG;;;;;;;"}