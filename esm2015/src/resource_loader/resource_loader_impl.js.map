{"version":3,"file":"resource_loader_impl.js","sourceRoot":"","sources":["../../../../../packages/platform-browser-dynamic/src/resource_loader/resource_loader_impl.ts"],"names":[],"mappings":";;;;AAOA,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAIzC,MAAM,yBAA0B,SAAQ,cAAc;;;;;IACpD,GAAG,CAAC,GAAW;QACb,qBAAI,OAA8B,CAAC;QACnC,qBAAI,MAA4B,CAAC;QACjC,uBAAM,OAAO,GAAG,IAAI,OAAO,CAAS,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAC/C,OAAO,GAAG,GAAG,CAAC;YACd,MAAM,GAAG,GAAG,CAAC;SACd,CAAC,CAAC;QACH,uBAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;QACjC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC3B,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC;QAE1B,GAAG,CAAC,MAAM,GAAG;;;;YAIX,uBAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,YAAY,CAAC;;YAGlD,qBAAI,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC;;;;YAKpD,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7B;YAED,EAAE,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;gBACnC,OAAO,CAAC,QAAQ,CAAC,CAAC;aACnB;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,kBAAkB,GAAG,EAAE,CAAC,CAAC;aACjC;SACF,CAAC;QAEF,GAAG,CAAC,OAAO,GAAG,cAAa,MAAM,CAAC,kBAAkB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC;QAE9D,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,CAAC,OAAO,CAAC;KAChB;;;YAxCF,UAAU","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ResourceLoader} from '@angular/compiler';\nimport {Injectable} from '@angular/core';\n\n\n@Injectable()\nexport class ResourceLoaderImpl extends ResourceLoader {\n  get(url: string): Promise<string> {\n    let resolve: (result: any) => void;\n    let reject: (error: any) => void;\n    const promise = new Promise<string>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n\n    xhr.onload = function() {\n      // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n      // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n      // by IE10)\n      const response = xhr.response || xhr.responseText;\n\n      // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n      let status = xhr.status === 1223 ? 204 : xhr.status;\n\n      // fix status code when it is 0 (0 status is undocumented).\n      // Occurs when accessing file resources or on Android 4.1 stock browser\n      // while retrieving files from application cache.\n      if (status === 0) {\n        status = response ? 200 : 0;\n      }\n\n      if (200 <= status && status <= 300) {\n        resolve(response);\n      } else {\n        reject(`Failed to load ${url}`);\n      }\n    };\n\n    xhr.onerror = function() { reject(`Failed to load ${url}`); };\n\n    xhr.send();\n    return promise;\n  }\n}\n"]}