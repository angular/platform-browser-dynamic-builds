{"version":3,"file":"dom_test_component_renderer.js","sourceRoot":"","sources":["../../../../../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAC,QAAQ,EAAE,OAAO,IAAI,MAAM,EAAC,MAAM,2BAA2B,CAAC;;;;;IAMxB,oDAAqB;IACjE,kCAAsC;QAAtC,YAAqE,iBAAO,SAAG;QAAzC,UAAI,GAAJ,IAAI;;KAAqC;;;;;IAE/E,oDAAiB;;;;IAAjB,UAAkB,QAAgB;QAChC,qBAAM,MAAM,qBAAgB,MAAM,EAAE,CAAC,UAAU,CAC3C,MAAM,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,cAAc,CAAC,eAAY,QAAQ,cAAU,CAAC,CAAC,CAAC,CAAA,CAAC;;QAG/E,qBAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QACpE,GAAG,CAAC,CAAC,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,MAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9B;QACD,MAAM,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAC9C;;gBAdF,UAAU;;;;gDAEI,MAAM,SAAC,QAAQ;;mCAjB9B;EAgB8C,qBAAqB;SAAtD,wBAAwB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {DOCUMENT, ÉµgetDOM as getDOM} from '@angular/platform-browser';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n@Injectable()\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor(@Inject(DOCUMENT) private _doc: any /** TODO #9100 */) { super(); }\n\n  insertRootElement(rootElId: string) {\n    const rootEl = <HTMLElement>getDOM().firstChild(\n        getDOM().content(getDOM().createTemplate(`<div id=\"${rootElId}\"></div>`)));\n\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = getDOM().querySelectorAll(this._doc, '[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n    getDOM().appendChild(this._doc.body, rootEl);\n  }\n}\n"]}