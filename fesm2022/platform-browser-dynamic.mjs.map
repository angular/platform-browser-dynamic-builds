{"version":3,"file":"platform-browser-dynamic.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser-dynamic/src/compiler_factory.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser-dynamic/src/resource_loader/resource_loader_impl.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser-dynamic/src/platform_providers.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CompilerConfig} from '@angular/compiler';\nimport {\n  Compiler,\n  CompilerFactory,\n  CompilerOptions,\n  Injector,\n  StaticProvider,\n  ViewEncapsulation,\n} from '@angular/core';\n\nexport const COMPILER_PROVIDERS = <StaticProvider[]>[\n  {provide: Compiler, useFactory: () => new Compiler()},\n];\n/**\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n */\nexport class JitCompilerFactory implements CompilerFactory {\n  private _defaultOptions: CompilerOptions[];\n\n  /** @internal */\n  constructor(defaultOptions: CompilerOptions[]) {\n    const compilerOptions: CompilerOptions = {\n      defaultEncapsulation: ViewEncapsulation.Emulated,\n    };\n\n    this._defaultOptions = [compilerOptions, ...defaultOptions];\n  }\n\n  createCompiler(options: CompilerOptions[] = []): Compiler {\n    const opts = _mergeOptions(this._defaultOptions.concat(options));\n    const injector = Injector.create({\n      providers: [\n        COMPILER_PROVIDERS,\n        {\n          provide: CompilerConfig,\n          useFactory: () => {\n            return new CompilerConfig({\n              defaultEncapsulation: opts.defaultEncapsulation,\n              preserveWhitespaces: opts.preserveWhitespaces,\n            });\n          },\n          deps: [],\n        },\n        opts.providers!,\n      ],\n    });\n    return injector.get(Compiler);\n  }\n}\n\nfunction _mergeOptions(optionsArr: CompilerOptions[]): CompilerOptions {\n  return {\n    defaultEncapsulation: _lastDefined(optionsArr.map((options) => options.defaultEncapsulation)),\n    providers: _mergeArrays(optionsArr.map((options) => options.providers!)),\n    preserveWhitespaces: _lastDefined(optionsArr.map((options) => options.preserveWhitespaces)),\n  };\n}\n\nfunction _lastDefined<T>(args: T[]): T | undefined {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\nfunction _mergeArrays(parts: any[][]): any[] {\n  const result: any[] = [];\n  parts.forEach((part) => part && result.push(...part));\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {ResourceLoader} from '@angular/compiler';\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class ResourceLoaderImpl extends ResourceLoader {\n  override get(url: string): Promise<string> {\n    let resolve: (result: any) => void;\n    let reject: (error: any) => void;\n    const promise = new Promise<string>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n\n    xhr.onload = function () {\n      const response = xhr.response;\n\n      let status = xhr.status;\n\n      // fix status code when it is 0 (0 status is undocumented).\n      // Occurs when accessing file resources or on Android 4.1 stock browser\n      // while retrieving files from application cache.\n      if (status === 0) {\n        status = response ? 200 : 0;\n      }\n\n      if (200 <= status && status <= 300) {\n        resolve(response);\n      } else {\n        reject(`Failed to load ${url}`);\n      }\n    };\n\n    xhr.onerror = function () {\n      reject(`Failed to load ${url}`);\n    };\n\n    xhr.send();\n    return promise;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  COMPILER_OPTIONS,\n  CompilerFactory,\n  createPlatformFactory,\n  PlatformRef,\n  StaticProvider,\n} from '@angular/core';\nimport {platformBrowser} from '@angular/platform-browser';\nimport {ResourceLoader} from '@angular/compiler';\nimport {ResourceLoaderImpl} from './resource_loader/resource_loader_impl';\nimport {JitCompilerFactory} from './compiler_factory';\n\nconst INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {\n    provide: COMPILER_OPTIONS,\n    useValue: {providers: [{provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: []}]},\n    multi: true,\n  },\n  {provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS]},\n];\n\n/**\n * @deprecated Use the `platformBrowser` function instead from `@angular/platform-browser`.\n * In case you are not in a CLI app and rely on JIT compilation, you will also need to import `@angular/compiler`\n */\nexport const platformBrowserDynamic: (extraProviders?: StaticProvider[]) => PlatformRef =\n  createPlatformFactory(\n    platformBrowser,\n    'browserDynamic',\n    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,\n  );\n"],"names":["_defaultOptions","compilerOptions","defaultOptions","opts","_mergeOptions","concat","options","create","providers","COMPILER_PROVIDERS","provide","CompilerConfig","useFactory","defaultEncapsulation","preserveWhitespaces","deps","optionsArr","_lastDefined","map","_mergeArrays","reject","promise","Promise","res","rej","xhr","XMLHttpRequest","open","url","responseType","onload","response","status","onerror","COMPILER_OPTIONS","multi"],"mappings":";;;;;;;;;;;;;;;;;;EAwCIA,eAAA;;;;AAKM,KAAA;2BACU,CAAAC,eAAA,KAAAC,cAAA,CAAA;;;IAIP,MAAAC,IAAA,GAAAC,aAAC,CAAA,IAAA,CAAAJ,eAAA,CAAAK,MAAA,CAAAC,OAAA,CAAA,CAAA;6BACH,CAAAC,MAAA,CAAA;MACDC,SAAA,EAAA,CACDC,kBAAA,EAEF;AACFC,QAAAA,OAAA,EAAAC,cAAA;AAEHC,QAAAA,UAAA,EAAAA,MAAA;AACD,UAAA,OAAA,IAAAD,cAAA,CAAA;YAEQE,oBAA2C,EAAAV,IAAA,CAAAU,oBAAA;YAC3CC,mBAAA,EAAAX,IAAA,CAAAW;AACL,WAAA,CAAA;AACA,SAAA;QACAC,IAAA,EAAA;AAEJ,OAAA,EAAA,IAAA,CAAA,SAAA;;;;;AAOEX,SAAAA,aAAAA,CAAAY,UAAA,EAAA;;wBAEF,EAAAC,YAAA,CAAAD,UAAA,CAAAE,GAAA,CAAAZ,OAAA,IAAAA,OAAA,CAAAO,oBAAA,CAAA,CAAA;aAES,EAAAM,YAAA,CAAAH,UAAA,CAAAE,GAAA,CAAAZ,OAAA,IAAAA,OAAA,CAAAE,SAAA,CAAA,CAAA;IACPM,mBAAwB,EAAAG,YAAA,CAAAD,UAAA,CAAAE,GAAA,CAAAZ,OAAA,IAAAA,OAAA,CAAAQ,mBAAA,CAAA;GACxB;;;;;;;;;;;;;;;;;;;AClEE,IAAA,IAAAM,MAAA;UACAC,OAAA,GAAgB,IAAAC,OAAW,EAAAC,GAAA,EAAAC,GAAA,KAAsB;aACxC,GAAAD,GAAA;;AAGT,KAAA,CAAA;UACmBE,GAAA,OAAAC,cAAA,EAAA;AACnBD,IAAAA,GAAA,CAAAE,IAAA,CAAyB,KAAA,EAAAC,GAAA,EAAA,IAAA,CAAA;QAEzBC,YAAa,GAAA,MAAA;IACXJ,GAAA,CAAAK,MAAA,GAAA,YAAc;AAEd,MAAA,MAAAC,QAAU,GAAAN,GAAA,CAAAM,QAAA;gBAEiD,GAAAN,GAAA,CAAAO,MAAA;qBAInD,CAAA,EAAA;cAGJ,GAAAD,QAAA,GAAA,GAAA,GAAA,CAAA;;uBAEG,IAAAC,MAAA,IAAA,GAAA,EAAA;;;AAMPZ,QAAAA,MAAA,mBAAOQ,GAAA,CAAA,CAAA,CAAA;;;AAKXK,IAAAA,GAAAA,CAAAA,OAAA,GAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA,MAAA,2CAAA,GAAA,CAAA;AAEEvB,EAAAA,OACA,EAAAwB,gBACD;;;;;;;;EAOAC,KAAA,EAAA;AACH;;;;;;;;;"}